use crate::prelude::*;

// -----------------------------------------------------------------------------
// Part 1
// -----------------------------------------------------------------------------
fn part_1(input: usize) -> usize {
    // 1^2 + 3^2 + 5^2 + ... + (2n + 1)^2
    2
}

// -----------------------------------------------------------------------------
// Run
// -----------------------------------------------------------------------------
pub(crate) fn run() -> Results {
    // -------------------------------------------------------------------------
    // Setup
    // -------------------------------------------------------------------------
    let start_setup = Instant::now();
    let input: usize = 347991;
    let time_setup = start_setup.elapsed();

    // -------------------------------------------------------------------------
    // Part 1
    // -------------------------------------------------------------------------
    let start_part_1 = Instant::now();
    let part_1 = part_1(input);
    let time_part_1 = start_part_1.elapsed();

    // -------------------------------------------------------------------------
    // Part 2
    // -------------------------------------------------------------------------
    let start_part_2 = Instant::now();
    // let part_2 = part_2(&input);
    let part_2 = 2;
    let time_part_2 = start_part_2.elapsed();

    // -------------------------------------------------------------------------
    // Return
    // -------------------------------------------------------------------------
    Results::new(
        part_1 as i64,
        part_2 as i64,
        Timing::new(
            time_setup,
            time_part_1,
            time_part_2,
            time_setup + time_part_1 + time_part_2,
        ),
    )
}

// -----------------------------------------------------------------------------
// Report
// -----------------------------------------------------------------------------
pub(crate) fn report(results: &Results) {
    output::print_day(3);
    output::print_part(1, "Manhattan distance", &format!("{}", results.part_1));
    output::print_part(2, "sum", &format!("{}", results.part_2));
    output::print_timing(&results.times);
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn part_1_example() {}
}
